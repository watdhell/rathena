//===== rAthena Script =======================================
//= Costume Enchanter
//===== By ===================================================
//= llchrisll
//===== Version ==============================================
//= 1.0 - Initial Version
//= 1.1 - Added support for all costume slots
//      - Added forgotten "Reset Enchantment" menu option
//= 1.2 - Added support to use an price to enchant
//      - Removed the unecessary variable for Reset Enchantment
//      - Modified the menu creation
//= 1.3 - Added requested features by Meneso on Discord:
//        Enchantment Chance
//        Selectable or Random Enchantment
//      - Added Cost Multiplier for higher Enchantment Levels
//      - Revamped Enchantment Config for better overview
//= 1.4 - Added a 2 requested features via discord pm
//        Enchant Announcement based on Item ID
//        Retry Feature - Allows the player to retry for a special price
//        Modified the script layout
//        Changed NPC coordinates
//===== Tested With ==========================================
//= rAthena 08/11/2023
//= GIT Hash: b3ddb4511c6904ab775789db304042e727cb2853
//===== Description ==========================================
//= This NPC allows players to enchant Costumes.
//= Selectable Enchants and reseting the Enchantments.
//===== Request =============================================
//= by Vegas (https://rathena.org/board/profile/53497-vegas/)
//= Topic: https://rathena.org/board/topic/115174-runen-enchanter-npc-for-custom-upper-middle-lower/
//============================================================
prontera,163,175,4	script	Costume Enchanter	101,{
function F_EnchantPrice;

disable_items;
mes .n$;
mes "Hello, "+strcharinfo(0)+"!";
mes "If you like I can enchant your costume equipment with any enchantment I have in store";
mes ( (.enchant_cost[0] > 0)?"in exchange for "+.enchant_cost[1]+"x "+getitemname(.enchant_cost[0])+ ( (.enchant_cost_m == 1)?", but the higher the enchantment level, the more it costs.":""):"for free")+".";
mes "I can also reset an Enchantment "+ ((.enchant_reset[0] > 0)?", but I require "+.enchant_reset[1]+"x "+getitemname(.enchant_reset[0]):"for free")+".";
next;
mes .n$;
mes "Please select the Costume you want me to handle:";
for ( set .@s,0; .@s < getarraysize(.equip_slot); set .@s,.@s + 1) {
	switch(.equip_slot[.@s]) {
		case EQI_COSTUME_HEAD_TOP: set .@c_slot$,"Top"; break;
		case EQI_COSTUME_HEAD_MID: set .@c_slot$,"Middle"; break;
		case EQI_COSTUME_HEAD_LOW: set .@c_slot$,"Lower"; break;
		case EQI_COSTUME_GARMENT: set .@c_slot$,"Garment"; break;
		case EQI_SHADOW_ARMOR: set .@c_slot$,"Shadow Armor"; break;
		case EQI_SHADOW_WEAPON: set .@c_slot$,"Shadow Weapon"; break;
		case EQI_SHADOW_SHIELD: set .@c_slot$,"Shadow Shield"; break;
		case EQI_SHADOW_SHOES: set .@c_slot$,"Shadow Shoes"; break;
		case EQI_SHADOW_ACC_R: set .@c_slot$,"Shadow Accessory Right"; break;
		case EQI_SHADOW_ACC_L: set .@c_slot$,"Shadow Accessory Left"; break;
	}
	set .@c_m$,.@c_m$ + ((getequipid(.equip_slot[.@s]) != -1)?"["+.@c_slot$ + "] "+getitemname(getequipid(.equip_slot[.@s])):"") + ( (.equip_slot[.@s+1] != 0)?":":"");
}
set .@c_m$,.@c_m$ + ":- Cancel";
set .@c,select(.@c_m$);
if(.@c > getarraysize(.equip_slot)) close;
set .@part,.equip_slot[.@c-1];
next;
mes .n$;
set .@hg,getequipid(.@part); // Saving Item ID
set .@ref,getequiprefinerycnt(.@part); 	// Saving Refine Level, if there is one
set .@card1,getequipcardid(.@part,0); // Save Item ID of Card Slot 1
mes "Selected Equipment: "+getitemname(getequipid(.@part));
next;
switch(select( ( (getequipcardid(.@part,3) == 0)?"- Enchantment":"") + ":" + ( (getequipcardid(.@part,3) != 0)?"- Reset Enchantment":"") + ":- Nevermind")) {
	
	case 1:
	OnRetry:
	if(.enchant_type == 1 && !.@Retry) { // Selectable Enchantment
		mes .n$;
		mes "Now please select the Enchantment:";
		next;
		for ( set .@e,0; .@e < getarraysize(.enchant_id); set .@e,.@e + 3)
			set .@e_m$,.@e_m$ + "> "+getitemname(.enchant_id[.@e])+ ( (.enchant_id[.@e+3] != 0)?":":"");
		set .@rune,select(.@e_m$)*3-3;
		
	} else if(.enchant_type == 0) // Random Enchantment
		set .@rune,rand(1,getarraysize(.enchant_id)/3)*3-3;

	mes .n$;
	if(.enchant_type == 1)
		mes "Enchantment: "+getitemname(.enchant_id[.@rune]);

	if(!.@Retry) {
		if(.enchant_cost[0] > 0) {
			mes "Price for Enchanting:";
			if(.enchant_cost_m == 1)
				mes (.enchant_cost[1]*.enchant_id[.@rune+2])+"x "+getitemname(.enchant_cost[0]);
			else
				mes .enchant_cost[1]+"x "+getitemname(.enchant_cost[0]);
		}
		if(.enchant_ch == 1)
			mes "Enchantment Chance: "+.enchant_id[.@rune+1];
		mes "Proceed?";
		next;
		if(select("- Yes:- No") - 1) close;
		mes .n$;
	}
	// Retry Feature
	if(.enchant_retry == 1 && .@Retry) {
		if(.@attempt <= .enchant_retries) {
			if( (.enchant_retry_m == 1 && countitem(.enchant_cost[0]) < (.enchant_retry_cost*.enchant_id[.@rune+2]) ) || (.enchant_retry_m == 0 && countitem(.enchant_cost[0]) < .enchant_retry_cost) ) {
				mes "It looks like you don't have enough "+getitemname(.enchant_cost[0])+"!";
				mes "You need at least "+( (.enchant_retry_m == 1)?(.enchant_retry_cost*.enchant_id[.@rune+2]):.enchant_retry_cost)+"x "+getitemname(.enchant_cost[0])+".";
				close;
			}
			F_EnchantPrice(.enchant_cost[0],( (.enchant_retry_m == 1)?(.enchant_retry_cost*.enchant_id[.@rune+2]):.enchant_retry_cost));
		
		} else {
			mes "You have run out of your retry attempts.";
			close;
		}
	
	// General Enchantment Cost
	} else if(.enchant_cost[0] > 0) {
		if( (.enchant_cost_m == 1 && countitem(.enchant_cost[0]) < (.enchant_cost[1]*.enchant_id[.@rune+2]) ) || (.enchant_cost_m == 0 && countitem(.enchant_cost[0]) < .enchant_cost[1]) ) {
			mes "It looks like you don't have enough "+getitemname(.enchant_cost[0])+"!";
			mes "You need at least "+( (.enchant_cost_m == 1)?(.enchant_cost[1]*.enchant_id[.@rune+2]):.enchant_cost[1])+"x "+getitemname(.enchant_cost[0])+".";
			close;
		}
		F_EnchantPrice(.enchant_cost[0],( (.enchant_cost_m == 1)?(.enchant_cost[1]*.enchant_id[.@rune+2]):.enchant_cost[1]));
	}
	delequip .@part;
	if(.enchant_ch == 1) { // Enabled Enchantment Chance
		set .@r,100-.enchant_id[.@rune+1];
		if(rand(100) < .@r) {
			emotion ET_SWEAT;
			getitem2 .@hg,1,1,.@ref,0,.@card1,0,0,0;
			equip .@hg;
			mes "I'm sorry, the enchantment failed.";
			if(.enchant_retry == 0) close;
			mes "Do you want to try again?";
			mes "Retrying costs "+( (.enchant_retry_m == 1)?.enchant_retry_cost*.enchant_id[.@rune+2]:.enchant_retry_cost)+"x "+getitemname(.enchant_cost[0])+".";
			next;
			if(select("- Yes:- No") - 1) close;
			set .@attempt,.@attempt + 1;
			set .@Retry,1;
			goto OnRetry;
			end;
		}
	}
	emotion ET_CONGRATULATION;
	getitem2 .@hg,1,1,.@ref,0,.@card1,0,0,.enchant_id[.@rune];
	equip .@hg;
	mes "The enchantment of ^FF0000"+getitemname(.enchant_id[.@rune])+"^000000 was a success.";
	if(.enchant_anno == 1 && inarray(.enchant_anno_id,.enchant_id[.@rune]) != -1)
		announce .n$+": ["+strcharinfo(0)+"] has succesfully enchanted "+( (Sex)?"his":"her")+" ["+getitemname(.@hg)+"] with ["+getitemname(.enchant_id[.@rune])+"] on chance of ["+.enchant_id[.@rune+1]+"]%.",bc_all;
	mes "See ya next time.";
	enable_items;
	break;

	case 2:
	mes .n$;
	if(.enchant_reset[0] > 0 && countitem(.enchant_reset[0]) < .enchant_reset[1]) {
		mes "But you don't have the required amount of "+getitemname(.enchant_reset[0])+" to reset the enchantment!";
		close;
	}
	mes "I'm ready to reset your enchanment whenever you want, proceed?";
	if(select("- Yes:- No") - 1) close;
	next;
	if(.enchant_reset[0]) 
		delitem .enchant_reset[0],.enchant_reset[1];
	delequip .@part;
	getitem2 .@hg,1,1,.@ref,0,.@card1,0,0,0;
	equip .@hg;
	mes .n$;
	mes "The enchantment has been reseted.";
	mes "See ya next time.";
	break;
	
	case 3: break;
}
end;

	function	F_EnchantPrice	{
		// getarg(0) == Item ID
		// getarg(1) == Cost
		if( countitem(getarg(0)) >= getarg(1) ) // To Be sure
			delitem getarg(0),getarg(1);
		else {
			npctalk "You don't have the required amount of "+getitemname(getarg(0))+" all of sudden.",""+.n$,bc_self;
			end;
		}
		return;
	}
	
OnInit:
set .n$,"[Costume Enchanter]";
// Enter here every Costume Slot, which you want to be enchantable
// Valid Entries:
// - EQI_COSTUME_HEAD_TOP
// - EQI_COSTUME_HEAD_MID
// - EQI_COSTUME_HEAD_LOW
// - EQI_COSTUME_GARMENT
// - EQI_SHADOW_ARMOR
// - EQI_SHADOW_WEAPON
// - EQI_SHADOW_SHIELD
// - EQI_SHADOW_SHOES
// - EQI_SHADOW_ACC_R
// - EQI_SHADOW_ACC_L
setarray .equip_slot[0],
	// Remember to use ';' at the last entry instead of ','
						EQI_COSTUME_HEAD_TOP,
						EQI_COSTUME_HEAD_MID,
						EQI_COSTUME_HEAD_LOW;
						//EQI_COSTUME_HEAD_LOW,
						//EQI_COSTUME_GARMENT,
						//EQI_SHADOW_ARMOR,
						//EQI_SHADOW_WEAPON,
						//EQI_SHADOW_SHIELD,
						//EQI_SHADOW_SHOES,
						//EQI_SHADOW_ACC_R,
						//EQI_SHADOW_ACC_L;
// Enchantment Type
// 0 = Random
// 1 = Selectable
set .enchant_type,0;
// Enchantment Chance
// 1 = Enable
// 0 = Disable
set .enchant_ch,1;
// Price for enchanting:
// To disable the price, put 0 as values
setarray .enchant_cost[0],501,10; // Item ID,Amount
// Price Multiplier depending on Enchantment
// 1 = Enable
// 0 = Disable
set .enchant_cost_m,1;
// Enchantment Database:
// [0] = Item ID of Enchantment
// [1] = Enchantment Chance (if enabled)
// [2] = Price Multiplier (if enabled)
setarray .enchant_id[0],
// Array Index:			0	1	2
						4709,10,1, // STR+10
						4719,10,1, // INT+10
						4729,10,1, // DEX+10
						4739,10,1, // AGI+10
						4749,10,1, // VIT+10
						4759,10,1; // LUK+10
// Price for reseting:
// To disable the price, put 0 as values
setarray .enchant_reset[0],501,10; // Item ID,Amount
// Announce specific Enchants via Item ID
// Makes an announce if the player achieves specific enchantment
// 1 = Enable/0 = Disable
set .enchant_anno,1;
if(.enchant_anno == 1) // Input IDs of enchants for announce
	setarray .enchant_anno_id[0],4709,4719,4729,4739,4749,4759;
// Retry Feature
// Enables the player to retry failed enchantments with adjusted price and amount of retries
// 1 = Enable/0 = Disable
set .enchant_retry,1;
if(.enchant_retry == 1) {
	set .enchant_retry_cost,5; // Price per retry
	set .enchant_retry_m,1; // 1 = Enable/0 = Disable the Multiplier for Retry
	set .enchant_retries,3; // Amount of retries
}
end;
}